// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SimulateGrass
#include "./shared/GrassBlade.cginc"
#include "./shared/PerlinNoise.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<GrassBlade> GrassBladesBuffer;
float Time;
float WindVelocity;
uint NoiseColumns;
uint NoiseRows;
float GrassBoundsX;
float GrassBoundsY;

[numthreads(1,1,1)]
void SimulateGrass (uint3 id : SV_DispatchThreadID)
{
    GrassBlade grassBlade = GrassBladesBuffer[id.x];

    float2 uv = float2(
        (grassBlade.position.x + GrassBoundsX) / (2 * GrassBoundsX),
        (grassBlade.position.y + GrassBoundsY) / (2 * GrassBoundsY)
    );

    grassBlade.noise = perlin(uv, NoiseColumns, NoiseRows, Time * WindVelocity);

    GrassBladesBuffer[id.x] = grassBlade;
}
